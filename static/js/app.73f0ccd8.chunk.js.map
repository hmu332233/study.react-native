{"version":3,"sources":["colors.ts","App.tsx"],"names":["theme","loadToDos","a","async","AsyncStorage","getItem","jsonValue","JSON","parse","App","mounted","useRef","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","current","toDoState","stringify","setItem","saveToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TextInput","input","placeholder","value","onChangeText","onSubmitEditing","originTodos","Date","now","returnKeyType","ScrollView","Object","entries","filter","map","key","todo","toDo","toDoText","handleOk","newToDos","Platform","OS","confirm","Alert","alert","cancelable","deleteTodo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","marginVertical","paddingVertical","borderRadius","alignItems","marginBottom"],"mappings":"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","file":"static/js/app.73f0ccd8.chunk.js","sourcesContent":["export const theme = {\n  bg: 'black',\n  grey: '#3A3D40',\n}","import { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, TextInput, ScrollView, Alert, Platform } from 'react-native';\nimport { theme } from './colors';\n\nimport { Fontisto } from '@expo/vector-icons'; \nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\ntype Todo = { text: string, working: boolean };\ntype TodoState = { [key: string]: Todo };\n\nconst STORAGE_KEY = '@TODOS'\nconst saveToDos = async (toDoState: TodoState) => {\n  try {\n    const jsonValue = JSON.stringify(toDoState)\n    await AsyncStorage.setItem(STORAGE_KEY, jsonValue)\n  } catch (e) {\n    // saving error\n  }\n}\nconst loadToDos = async () => {\n  try {\n    const jsonValue = await AsyncStorage.getItem(STORAGE_KEY)\n    return jsonValue !== null ? JSON.parse(jsonValue) : {};\n  } catch (e) {\n    // error reading value\n  }\n}\n\nexport default function App() {\n  const mounted = useRef<boolean>();\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState('');\n  const [toDos, setToDos] = useState<TodoState>({});\n  const onChangeText = (text: string) => setText(text);\n  const addTodo = () => {\n    if (text === '') {\n      return;\n    }\n\n    setToDos(originTodos => ({ ...originTodos, [Date.now()]: { text, working } }));\n    setText('');\n  }\n  const deleteTodo = (key: string) => {\n\n    const handleOk = () => {\n      const newToDos = { ...toDos };\n      delete newToDos[key];\n      setToDos(newToDos);\n    }\n\n    if (Platform.OS  === 'web') {\n      const ok = confirm('Do you want to delete this To Do?');\n      if (ok) {\n        handleOk();\n      }\n    } else {\n      Alert.alert(\n        \"Delete To Do\",\n        \"Are you sure?\",\n        [\n          {\n            text: \"Cancel\",\n            style: \"destructive\"\n          },\n          {\n            text: \"OK\",\n            onPress: () => handleOk(),\n          }\n        ],\n        { cancelable: false }\n      );\n    }\n    \n  }\n\n  useEffect(() => {\n    (async () => {\n      const toDos = await loadToDos();\n      setToDos(toDos);\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!mounted.current) {\n      mounted.current = true;\n      return;\n    }\n    saveToDos(toDos);\n  }, [toDos])\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        {/* 눌렀을때 opacity 효과를 줌 */}\n        <TouchableOpacity onPress={() => setWorking(true)}>\n          <Text style={{ ...styles.btnText, color: working ? 'white' : theme.grey }}>Work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={() => setWorking(false)}>\n          <Text style={{ ...styles.btnText, color: working ? theme.grey : 'white' }}>Travel</Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput style={styles.input} placeholder={working ? 'Add a To Do' : 'Where do you want to go?'} value={text} onChangeText={onChangeText} onSubmitEditing={addTodo} returnKeyType=\"done\" />\n      <ScrollView>\n        {Object.entries<Todo>(toDos).filter(([key, todo]) => todo.working === working).map(([key, todo]) => (\n          <View key={key} style={styles.toDo}>\n            <Text style={styles.toDoText}>{todo.text}</Text>\n            <TouchableOpacity onPress={() => deleteTodo(key)}>\n              <Fontisto name=\"trash\" size={18} color=\"white\" />\n            </TouchableOpacity>\n          </View>\n        ))}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: 'space-between',\n    flexDirection: 'row',\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: '600',\n    color: 'white'\n  },\n  input: {\n    marginVertical: 20,\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    backgroundColor: 'white',\n    fontSize: 18,\n  },\n  toDo: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n  },\n  toDoText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '500',\n  }\n});\n"],"sourceRoot":""}